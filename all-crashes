#!/bin/bash

# Copyright (c) 2013, 2014, 2015 MIT Probabilistic Computing Project.
#
# This file is part of Venture.
#
# Venture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Venture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Venture.  If not, see <http://www.gnu.org/licenses/>.

# Reset the working directory to the script's path
my_abs_path=$(readlink -f "$0")
my_dirname=$(dirname $my_abs_path)
cd "$my_dirname"

function abort_on_error () {
    if [[ $? -ne "0" ]]; then
        echo FAILED: $1
        exit 1
    fi
}

# TODO Reenable Lite multiprocessing after we figure out why it was
# causing tester processes to hang.
lite_multiprocess=""
# lite_multiprocess="--processes=4 --process-timeout=1200"

# Attempts to abstract this better failed due to bash's impossible
# quoting mechanisms.
function test_inference_program_in_lite() {
    infer=$1
    echo nosetests $lite_multiprocess -c inference-quality.cfg --eval-attr="\"not slow and (not backend or backend in ['lite', 'any']) and (not inf_prim or inf_prim in ['any'])\"" --tc=get_ripl:lite --tc=ignore_inference_quality:true --tc=infer:"\"$infer\""
    nosetests $lite_multiprocess -c inference-quality.cfg --eval-attr="not slow and (not backend or backend in ['lite', 'any']) and (not inf_prim or inf_prim in ['any'])" --tc=get_ripl:lite --tc=ignore_inference_quality:true --tc=infer:"$infer"
    abort_on_error "$infer in Lite"
}

function test_inference_program_in_puma() {
    infer=$1
    echo nosetests -c inference-quality.cfg --tc=ignore_inference_quality:true --eval-attr="\"not slow and (not backend or backend in ['puma', 'any']) and (not inf_prim or inf_prim in ['any'])\"" --tc=infer:"\"$infer\"" --tc=get_ripl:puma
    nosetests -c inference-quality.cfg --tc=ignore_inference_quality:true --eval-attr="not slow and (not backend or backend in ['puma', 'any']) and (not inf_prim or inf_prim in ['any'])" --tc=infer:"$infer" --tc=get_ripl:puma
    abort_on_error "$infer in Puma"
}

# TODO Reenable multiprocessing for puma, after nose is made robust to
# worker processes blowing up.
echo nosetests -c crashes.cfg --tc=get_ripl:puma
nosetests -c crashes.cfg --tc=get_ripl:puma
abort_on_error "(resimulation_mh default one 3) in Puma"

echo nosetests $lite_multiprocess -c crashes-base.cfg --tc=get_ripl:lite --eval-attr="\"not slow and (not backend or backend in ['lite', 'any'])\""
nosetests $lite_multiprocess -c crashes-base.cfg --tc=get_ripl:lite --eval-attr="not slow and (not backend or backend in ['lite', 'any'])"
abort_on_error "(resimulation_mh default one 3) in Lite"

test_inference_program_in_lite "(rejection default all 1)"
test_inference_program_in_lite "(func_pgibbs default ordered 3 3)"
test_inference_program_in_lite "(pgibbs default ordered 3 3)"
test_inference_program_in_lite "(meanfield default one 3 3)"
test_inference_program_in_lite "(subsampled_mh default one 1 3 0.01 false 0 false 2)"

test_inference_program_in_puma "(func_mh default one 3)"
test_inference_program_in_puma "(func_pgibbs default ordered 3 3 false)"
