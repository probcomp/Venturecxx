// Copyright (c) 2014, 2015 MIT Probabilistic Computing Project.
//
// This file is part of Venture.
//
// Venture is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Venture is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Venture.  If not, see <http://www.gnu.org/licenses/>.

// Run me with venture lite -f trickiness-ideal.vnts
// (lite because Puma does not support rejection sampling)
infer resample(40);
assume is_tricky = bernoulli(0.1);
assume weight = if (is_tricky) {
  uniform_continuous(0, 1)
} else {
  0.5
};
plotf_to_file("ideal_prior_trick_mar", "h0", run(collect(is_tricky)));
plotf_to_file("ideal_prior_weight_mar", "h0", run(collect(weight)));
plotf_to_file("ideal_prior_joint", "p0d1d", run(collect(is_tricky, weight)));
observe bernoulli(weight) = 1;
observe bernoulli(weight) = 1;
observe bernoulli(weight) = 1;
plotf_to_file("ideal_obs_trick_mar", "h0", run(collect(is_tricky)));
plotf_to_file("ideal_obs_weight_mar", "h0", run(collect(weight)));
plotf_to_file("ideal_obs_joint", "p0d1d", run(collect(is_tricky, weight)));
infer rejection(default, all, 1);
plotf_to_file("ideal_trick_mar", "h0", run(collect(is_tricky)));
plotf_to_file("ideal_weight_mar", "h0", run(collect(weight)));
plotf_to_file("ideal_joint", "p0d1d", run(collect(is_tricky, weight)));
observe bernoulli(weight) = 1;
observe bernoulli(weight) = 1;
observe bernoulli(weight) = 1;
infer rejection(default, all, 1);
plotf_to_file("ideal_more_data_trick_mar", "h0", run(collect(is_tricky)));
plotf_to_file("ideal_more_data_weight_mar", "h0", run(collect(weight)));
plotf_to_file("ideal_more_data_joint", "p0d1d", run(collect(is_tricky, weight)));
